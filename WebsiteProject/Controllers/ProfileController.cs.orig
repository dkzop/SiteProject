using System;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using Umbraco.Web.Models;
using Umbraco.Web.Mvc;
using WebsiteProject.Models;

namespace WebsiteProject.Controllers
{
    [Authorize]
    public class ProfileController : RenderMvcController
    {
        [HttpGet]
        public ActionResult ProfilePage(ContentModel model)
        {

            var membershipUser = Membership.GetUser();
            var user = Services.MemberService.GetById((int)membershipUser.ProviderUserKey);
            var returnModel = new ProfilePageModel(model.Content)
            {
                Person = new PersonModel()
                {
                    PrimeiroNome = user.GetValue<string>("primeiroNome"),
                    DatadeNascimento = user.GetValue<string>("datadeNascimento"),
                    Peso = user.GetValue<int>("peso"),
                    Altura = user.GetValue<int>("altura"),
                    CordoCabelo = user.GetValue<string>("cordoCabelo"),
                    CordeOlhos = user.GetValue<string>("cordeolhos"),

                }
            };

            var avatarId = user.GetValue<int>("avatar");

            var avatar = UmbracoContext.MediaCache.GetById(avatarId);

<<<<<<< HEAD
            returnModel.Person.ImagemUrl = avatar.Url;
=======
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ChangePassword(ChangePasswordModel changePasswordModel)
        {
            if (User.Identity.IsAuthenticated && ModelState.IsValid)
            {
                var user = Membership.GetUser();
                user.ChangePassword(changePasswordModel.Password, changePasswordModel.NewPassword);
                if (changePasswordModel.Password != changePasswordModel.NewPassword)
                {
                    Membership.UpdateUser(user);
                    return CurrentUmbracoPage();
                }
                else
                {
                    ModelState.AddModelError("changepasswordInvalid", "Os dois campos são iguais ou a password antiga está errada.");
                }
            }
            return CurrentUmbracoPage();
        }

        public ActionResult PersonData(PersonModel personModel)
        {
            if (User.Identity.IsAuthenticated && ModelState.IsValid)
            {
                var membershipUser = Membership.GetUser();
                var user = Services.MemberService.GetById((int)membershipUser.ProviderUserKey);
                user.SetValue("primeiroNome", personModel.PrimeiroNome);
                user.SetValue("datadenascimento", personModel.DatadeNascimento);
                user.SetValue("peso", personModel.Peso);
                user.SetValue("altura", personModel.Altura);
                user.SetValue("cordoCabelo", personModel.CordoCabelo);
                user.SetValue("cordeOlhos", personModel.CordeOlhos);
                user.SetValue("sexo", personModel.SexoPessoa);
                if (personModel.ImagemParaCarregar != null)
                {
                    var newFileReference = Services.MediaService.CreateMedia("avatar", -1, "Image");
                    if (!Valid(personModel.ImagemParaCarregar))
                    {
                        newFileReference.SetValue("umbracoFile", personModel.ImagemParaCarregar.InputStream);
                        Services.MediaService.Save(newFileReference);

                        user.SetValue("avatar", newFileReference.Id);
                    }
                }

                Services.MemberService.Save(user);
            }
>>>>>>> master

            return CurrentTemplate(returnModel);
        }

        private bool Valid(HttpPostedFileBase imagem)
        {
            var fileInfo = new FileInfo(imagem.FileName);
            if ((new string[] { "png", "jpg", "jpeg" }).Contains(fileInfo.Extension)
                && imagem.ContentLength < 15000)
            {
                return true;
            }

            return false;
        }
    }
}